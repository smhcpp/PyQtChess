# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
from pathlib import Path
import sys

from PySide2 import  QtWidgets, QtCore,QtGui
from PySide2.QtWidgets import *
from PySide2.QtUiTools import QUiLoader
from PySide2.QtGui import *
from PySide2.QtCore import *
from math import floor
from src.Board import *

icons=[["pics/wpawn.png","pics/bpawn.png"],
        ["pics/wknight.png","pics/bknight.png"],
        ["pics/wbishop.png","pics/bbishop.png"],
        ["pics/wrook.png","pics/brook.png"],
        ["pics/wqueen.png","pics/bqueen.png"],
        ["pics/wking.png","pics/bking.png"]]
squaresize=60
iconsizes=[squaresize-10,squaresize,squaresize,squaresize,squaresize,squaresize]
class PromotionWindow(QWidget):
    def __init__(self,posx,posy,pcolor,mainwindow):
        super().__init__()
        self.move(posx,posy)
        #self.setWindowFlag(Qt.FramelessWindowHint)
        self.pcolor=pcolor
        self.selectedPType=0
        self.mwin=mainwindow
        self.setupUi()

    def mousePressEvent(self, e):
        if e.y()>=self.gap and e.y()<=self.gap+squaresize:
            x=e.x()
            for i in range(4):
                if x>=i*squaresize+(i+1)*self.gap and x<=(i+1)*squaresize +(i+1)*self.gap:
                    self.selectedPType=i+1
                    #print(self.selectedPType)
                    self.mwin.promotionReactivate(self.selectedPType)
                    self.close()

    def setupUi(self):
        self.gap=10
        self.resize(4*squaresize+5*self.gap, squaresize+2*self.gap)
        self.buttons=[]
        for ptype in range(1,5):
            b=QLabel(self)
            #icon = QIcon()
            i=ptype-1
            b.setStyleSheet("border: 1px solid black;")
            b.setGeometry(QRect(self.gap*ptype+squaresize*i,self.gap , squaresize, squaresize))
            b.setPixmap(icons[ptype][self.pcolor])#(icon)
            b.setScaledContents(True)
            #b.setText(str(ptype))
            
            self.buttons.append(b)
            #b.clicked.connect( lambda: self.clickedAction( self.buttons[i].x() ))
    
class ChessGui(QWidget):
    #TODO: load these settings from a yaml file
    blacksquarecolor=QColor(110, 110, 240)
    whitesquarecolor=QColor(220, 220, 220)
    boardx=160
    boardy=60
    selectedlabelpos=None
    labels=dict()
    promotionpos=[None,None]


    def __init__(self):
        super().__init__()
        self.setupUi()

    def setupUi(self):
        self.move(300,50)
        self.resize(800, 600)
        self.board=Board()
        self.setUpIcons()

##############################################################
#Painting the board:
##############################################################
    def evalPosition(self,boardmargin,n,ptype):
        posavg=(squaresize-iconsizes[ptype])/2
        return boardmargin +n*squaresize+posavg
    
    def evalBoardPosition(self,x,y):
        xp=(x-self.boardx)/squaresize
        yp=(y-self.boardy)/squaresize
        return (floor(xp),floor(yp))
    
    def setUpIcons(self):
        for key in self.board.pieces:
            label=QLabel(self)
            label.setPixmap(QPixmap(icons[self.board.pieces[key].ptype][self.board.pieces[key].pcolor]))
            label.setScaledContents(True)
            x=self.evalPosition(self.boardx,self.board.pieces[key].position[0],self.board.pieces[key].ptype)
            y=self.evalPosition(self.boardy,self.board.pieces[key].position[1],self.board.pieces[key].ptype)
            size=iconsizes[self.board.pieces[key].ptype]
            label.setGeometry(QRect(x,y , size, size))
            self.labels[key]=label
        
        for n in range(8):
            x=self.boardx-30
            y=self.boardy+n*squaresize+squaresize/2-10
            q=QLabel(self)
            q.setText(str(n))
            q.setGeometry(QRect(x,y , 20, 20))

        for n in range(8):
            x=self.boardx+n*squaresize+squaresize/2-5
            y=self.boardy+8*squaresize+10
            q=QLabel(self)
            q.setText(str(n))
            q.setGeometry(QRect(x,y , 20, 20))

    def paintEvent(self, e):
        qp = QPainter()
        qp.begin(self)
        for j in range(8):
            for i in range(8):
                if (i+j)%2==0:
                    qp.setBrush(self.whitesquarecolor)
                else:
                    qp.setBrush(self.blacksquarecolor)
                    qp.drawRect(self.boardx+i*squaresize, self.boardy+j*squaresize, squaresize, squaresize)
        qp.end()
##################################################
#Setting up Events:
##################################################

    def mousePressEvent(self, event):
        self.selectedlabelpos=self.evalBoardPosition(event.x(),event.y())
        if self.selectedlabelpos in self.labels:
            obj=self.labels[self.selectedlabelpos]
            obj.__mousePressPos = None
            obj.__mouseMovePos = None
            if event.button() == QtCore.Qt.LeftButton:
                obj.__mousePressPos = event.globalPos()
                obj.__mouseMovePos = event.globalPos()
        else:
            print(f'There is a problem with the position {self.selectedlabelpos}.')

    def mouseMoveEvent(self, event):
        if event.buttons() == QtCore.Qt.LeftButton:
            if self.selectedlabelpos!=None and self.selectedlabelpos in self.labels:
                obj=self.labels[self.selectedlabelpos]
                # adjust offset from clicked point to origin of widget
                currPos = obj.mapToGlobal(obj.pos())
                globalPos = event.globalPos()
                diff = globalPos - obj.__mouseMovePos
                newPos = obj.mapFromGlobal(currPos + diff)
                obj.move(newPos)

                obj.__mouseMovePos = globalPos
    def gameDrawn(self):
        msg = QMessageBox(self)
        msg.setIcon(QMessageBox.Critical)
        msg.setText("The game is drawn!")
        msg.setInformativeText("Draw")
        msg.setWindowTitle("Info")
        msg.show()

    def mouseReleaseEvent(self, event):
        topos=self.evalBoardPosition(event.x(),event.y())
        if self.selectedlabelpos!=None and self.selectedlabelpos in self.labels:
            if (topos[0]!=self.selectedlabelpos[0] or topos[1]!=self.selectedlabelpos[1]):
                obj=self.labels[self.selectedlabelpos]
                piece=self.board.pieces[self.selectedlabelpos]
                if obj.__mousePressPos is not None:
                    #moved = event.globalPos() - obj.__mousePressPos
                    enpassantready_temp=self.board.enpassantready
                    moveresponse=self.board.move(self.selectedlabelpos,topos)
                    """ 
                        moveresponse:
                            0: a normal move where nothing has to be done! 
                            1: TODO: a check mate! (find who is mated by movenumber)
                            2: TODO: a Stalemate! (find who stalemated by movenumber)
                            3: a draw by insufficient materials
                            4: TODO: a draw by repetition of moves
                            5: TODO: a draw by agreement -> this should not be here. Not in the board
                            6: TODO: resigning -> this should not be here. Not in the board
                            10: promotion
                            11: castling
                            12: TODO: enpassant
                            404: ilegal move!
                    """
                    if moveresponse!=404:
                        if moveresponse==10:
                            self.promotionpos[0]=self.selectedlabelpos
                            self.promotionpos[1]=topos
                            dialog=PromotionWindow(event.x()-2*squaresize, event.y(), piece.pcolor,self)
                            self.setDisabled(True)
                            dialog.show()
                            dialog.exec_()
                        #elif moveresponse==3:
                        #    self.gameDrawn()
                        elif moveresponse==11:
                            side=floor(topos[0]/4) #0:queenside, 1:kingside
                            rooktox=topos[0]+(-1)**side
                            self.moveLabel((side*7,topos[1]),(rooktox,topos[1]),piece.ptype)
                            self.labels.pop((side*7,topos[1]))
                        elif moveresponse==12:
                            self.labels[enpassantready_temp].close()
                            self.labels.pop(enpassantready_temp)
                        else:
                            if topos in self.labels:
                                self.labels[topos].close()
                                self.labels.pop(topos)
                        self.moveLabel(self.selectedlabelpos,topos,piece.ptype)
                        self.labels.pop(self.selectedlabelpos)
                        print("______________Next Move________________")
                    else:
                        self.moveLabel(self.selectedlabelpos,self.selectedlabelpos,piece.ptype)
            else: 
                self.moveLabel(self.selectedlabelpos,self.selectedlabelpos,self.board.pieces[self.selectedlabelpos].ptype)
                print("Moving a piece to its own position is not legal!")
        else:
            print(f'Seems there is a problem with the position {self.selectedlabelpos}.')  
        # game drawn:
        if self.board.isForcedDraw():
            self.gameDrawn()     
            
    def moveLabel(self,frompos,topos,ptype,remove_frompos=False):
        x=self.evalPosition(self.boardx, topos[0], ptype)
        y=self.evalPosition(self.boardy, topos[1], ptype)
        self.labels[frompos].move(x,y)
        self.labels[topos]=self.labels[frompos]
        #del self.labels[frompos]
    def promotionReactivate(self,ptype):
        pcolor=self.board.pieces[self.promotionpos[1]].pcolor
        newl=QLabel(self)
        newl.setPixmap(QPixmap(icons[ptype][pcolor]))
        newl.setScaledContents(True)
        x=self.evalPosition(self.boardx,self.promotionpos[1][0],ptype)
        y=self.evalPosition(self.boardy,self.promotionpos[1][1],ptype)
        size=iconsizes[ptype]
        newl.setGeometry(QRect(x,y , size, size))
        newl.setVisible(True)

        self.board.takeFurtherActions([10, ptype,self.promotionpos[1]])

        self.labels[self.promotionpos[0]].close()
        self.labels.pop(self.promotionpos[0])
        if self.promotionpos[1] in self.labels:
            self.labels[self.promotionpos[1]].close()
            self.labels.pop(self.promotionpos[1])

        self.labels[self.promotionpos[1]]=newl
        self.update()
        self.promotionpos=[None,None]
        self.setDisabled(False)
        
        
        
##################################################
if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    window = ChessGui()
    #PromotionWindow(500, 150, 0)
    window.show()
    sys.exit(app.exec_())
